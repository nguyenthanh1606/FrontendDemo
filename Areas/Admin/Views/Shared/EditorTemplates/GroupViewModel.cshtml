@model Admin.Models.GroupViewModel
@{
    string[] listAdvanceProperties = ViewBag.ListAdvanceProp;
}
@Html.HiddenFor(m => m.GroupID)

<div class="col-lg-12">
<div class="x_panel">
    <div class="x_title clearfix">
        <h2>
            @Resource.GeneralInfo
            <small>@Resource.GroupGeneralInfoDescription</small>
        </h2>

        <ul class="nav navbar-right panel_toolbox">
            <li>
                <a class="collapse-link"><i class="fa fa-chevron-down"></i></a>
            </li>
        </ul>
    </div>
    <div class="x_content">
        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.Title))? "advanceProp" : "")">
            <div>
                @Html.LabelFor(model => model.Title, new { @class = "control-label" })
                <span class="pull-right">{{group.Title? group.Title.length : 0}}/{{groupTitleMaxLength}} @Resource.Characters</span>
            </div>
            @Html.TextBoxFor(model => model.Title, new { @class = "form-control", v_model = "group.Title" })
            @Html.ValidationMessageFor(model => model.Title)
            <div class="note">@Resource.GroupTitleExplanation</div>
        </div>

        <div class="form-group  @(listAdvanceProperties.Contains(Html.NameOf(m => m.Description))? "advanceProp" : "")">
            @Html.LabelFor(model => model.Description, new { @class = "control-label" })
            @Html.TextAreaFor(model => model.Description, 8, 10, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Description)
            <div class="note">@Resource.GroupDescriptionExplanation</div>
        </div>

        <div class="form-group  @(listAdvanceProperties.Contains(Html.NameOf(m => m.Body))? "advanceProp" : "")">
            @Html.LabelFor(model => model.Body, new { @class = "control-label" })
            @Html.TextAreaFor(model => model.Body, new { @class = "form-control ck_editor" })
            @Html.ValidationMessageFor(model => model.Body)
            <div>@Resource.GroupDescriptionExplanation</div>
        </div>
        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.GroupParentID))? "advanceProp" : "")">
            @Html.LabelFor(model => model.GroupParentID, new { @class = "control-label" })
            @Html.DropDownListFor(model => model.GroupParentID, new SelectList(@ViewBag.GroupsParent, "Key", "Value"),
                string.Format(Resource.SelectParentPlaceHolder, Resource.Groups), new { @class = "form-control ddl_select2" })
            @Html.ValidationMessageFor(model => model.GroupParentID)
            <div class="note">@Resource.GroupParentExplanation</div>
        </div>
    </div>
</div>
</div>
<div class="col-lg-12">
<div class="x_panel">
    <div class="x_title clearfix">
        <h2>
            @Resource.SeoOptimized
            <small>@Resource.SeoOptimizedDescription</small>
        </h2>
        <ul class="nav navbar-right panel_toolbox">
            <li>
                <a class="collapse-link"><i class="fa fa-chevron-down"></i></a>
            </li>
        </ul>
    </div>

    <div class="x_content">
        <div class="form-group">
            @Html.LabelFor(model => model.FriendlyUrl, new { @class = "control-label" })
            <div v-show="!isEditUrl">
                <div class="input-group">
                    <input type="text" class="form-control" readonly v-model="currentUrl">
                    <div class="input-group-btn">
                        <button class="btn btn-default" type="button" v-on:click="isEditUrl = true">@Resource.EditFriendlyUrl</button>
                    </div>
                </div>
            </div>
            <div v-show="isEditUrl">
                <div class="input-group">
                    <span class="input-group-addon">
                        <label class="checkbox-inline">@Html.CheckBoxFor(m => m.IsUseExternalLink, new { v_model = "isUseExternalLink" })@Resource.UserExternalLink</label>
                    </span>
                    @Html.TextBoxFor(model => model.FriendlyUrl, new { @class = "form-control", v_model = "friendlyUrl", v_show = "!isUseExternalLink" })
                    @Html.TextBoxFor(model => model.ExternalLink, new { @class = "form-control", v_model = "externalLink", v_show = "isUseExternalLink" })
                    <div class="input-group-btn">
                        <button class="btn btn-primary" type="button" v-on:click="saveUrl()">@Resource.Save</button>
                        <button class="btn btn-default" type="button" v-on:click="cancelEdit()">@Resource.Cancel</button>
                    </div>
                </div>
                <span v-show="!isUseExternalLink">@Html.ValidationMessageFor(model => model.FriendlyUrl)</span>
                <span v-show="isUseExternalLink">@Html.ValidationMessageFor(model => model.ExternalLink)</span>
                @Html.HiddenFor(m => m.OriginalUrl)
                <div class="note">@Resource.FriendlyUrlExplanation</div>
            </div>
        </div>
        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.CustomizeTitle))? "advanceProp" : "")">
            <div>
                @Html.LabelFor(model => model.CustomizeTitle, new { @class = "control-label" })
                <span class="pull-right">{{group.CustomizeTitle? group.CustomizeTitle.length : 0}}/{{customizeTitleMaxLength}} @Resource.Characters</span>
            </div>
            @Html.TextBoxFor(model => model.CustomizeTitle, new { @class = "form-control", v_model = "group.CustomizeTitle" })
            @Html.ValidationMessageFor(model => model.CustomizeTitle)
            <div class="note">@Resource.GroupTitleExplanation</div>
        </div>
        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.CustomizeDescription))? "advanceProp" : "")">
            @Html.LabelFor(model => model.CustomizeDescription, new { @class = "control-label" })
            @Html.TextAreaFor(model => model.CustomizeDescription, 5, 5, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CustomizeDescription)
            <div class="note">@Resource.GroupDescriptionExplanation</div>
        </div>
    </div>
</div>

<div class="x_panel">
    <div class="x_title clearfix">
        <h2>
            @Resource.Display
        </h2>
        <ul class="nav navbar-right panel_toolbox">
            <li>
                <a class="collapse-link"><i class="fa fa-chevron-down"></i></a>
            </li>
        </ul>
    </div>
    <div class="x_content">
        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.Status))? "advanceProp" : "")">
            @Html.LabelFor(model => model.Status, new { @class = "control-label" })
            <label class="checkbox-inline">
                @Html.RadioButtonFor(model => model.Status, 0)@Resource.Invisible
            </label>
            <label class="checkbox-inline">
                @Html.RadioButtonFor(model => model.Status, 1)@Resource.Visible
            </label>
        </div>

        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.Layout))? "advanceProp" : "")">
            @Html.LabelFor(model => model.Layout, new { @class = "control-label" })
            @Html.DropDownListFor(model => model.Layout, new SelectList(@ViewBag.GroupLayout, "GroupLayoutID", "Title"),
                new { @class = "form-control ddl_select2", onChange = "GetLayoutThumbnail(this)" })
            <div class="note">@Resource.GroupLayoutExplanation</div>
            <div>
                <img src="@Url.Action("GetLayoutThubnail", "Groups", new { id = Model.Layout })" class="img-responsive" id="themeThumbnail" />
            </div>
        </div>

        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.Priority))? "advanceProp" : "")">
            @Html.LabelFor(model => model.Priority, new { @class = "control-label" })
            @Html.TextBoxFor(model => model.Priority, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Priority)
        </div>
    </div>
</div>

<div class="x_panel">
    <div class="x_title clearfix">
        <h2>@Resource.Image</h2>
        <ul class="nav navbar-right panel_toolbox">
            <li>
                <a class="collapse-link"><i class="fa fa-chevron-down"></i></a>
            </li>
        </ul>
    </div>
    <div class="x_content">
        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.ImageUrl))? "advanceProp" : "")">
            @Html.LabelFor(model => model.ImageUrl, new { @class = "control-label" })
            <div class="clearfix">
                <img id="ImageUrlThumbnail" src="@Model.ImageUrl" class="pull-left quick-thumbnail"/>
                @Html.FilesManagerTextboxFor(model => model.ImageUrl, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ImageUrl)
            </div>
        </div>
        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.BannerUrl))? "advanceProp" : "")">
            @Html.LabelFor(model => model.BannerUrl, new { @class = "control-label" })
            <div class="clearfix">
                <img id="BannerUrlThumbnail" src="@Model.BannerUrl" class="pull-left quick-thumbnail" />
                @Html.FilesManagerTextboxFor(model => model.BannerUrl, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BannerUrl)
            </div>
        </div>
        <div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.IconUrl))? "advanceProp" : "")">
            @Html.LabelFor(model => model.IconUrl, new { @class = "control-label" })
            <div class="clearfix">
                <img id="IconUrlThumbnail" src="@Model.IconUrl" class="pull-left quick-thumbnail" />
                @Html.FilesManagerTextboxFor(model => model.IconUrl, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IconUrl)
            </div>
        </div>
    </div>
</div>
</div>

@*<div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.ShowOnMainMenu))? "advanceProp" : "")">
    @Html.LabelFor(model => model.ShowOnMainMenu, new { @class = "control-label" })
    <div class="">
        <label class="checkbox-inline">
            @Html.RadioButtonFor(model => model.ShowOnMainMenu, false)@Resource.Invisible
        </label>
        <label class="checkbox-inline">
            @Html.RadioButtonFor(model => model.ShowOnMainMenu, true)@Resource.Visible
        </label>
    </div>
</div>
<div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.ShowOnTopMenu))? "advanceProp" : "")">
    @Html.LabelFor(model => model.ShowOnTopMenu, new { @class = "control-label" })
    <div class="">
        <label class="checkbox-inline">
            @Html.RadioButtonFor(model => model.ShowOnTopMenu, false)@Resource.Invisible
        </label>
        <label class="checkbox-inline">
            @Html.RadioButtonFor(model => model.ShowOnTopMenu, true)@Resource.Visible
        </label>
    </div>
</div>
<div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.ShowOnBottomMenu))? "advanceProp" : "")">
    @Html.LabelFor(model => model.ShowOnBottomMenu, new { @class = "control-label" })
    <div class="">
        <label class="checkbox-inline">
            @Html.RadioButtonFor(model => model.ShowOnBottomMenu, false)@Resource.Invisible
        </label>
        <label class="checkbox-inline">
            @Html.RadioButtonFor(model => model.ShowOnBottomMenu, true)@Resource.Visible
        </label>
    </div>
</div>
<div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.ShowOnHome))? "advanceProp" : "")">
    @Html.LabelFor(model => model.ShowOnHome, new { @class = "control-label" })
    <div class="">
        <label class="checkbox-inline">
            @Html.RadioButtonFor(model => model.ShowOnHome, 0)@Resource.Invisible
        </label>
        <label class="checkbox-inline">
            @Html.RadioButtonFor(model => model.ShowOnHome, 1)@Resource.Visible
        </label>
    </div>
</div>*@


@*<div class="form-group @(listAdvanceProperties.Contains(Html.NameOf(m => m.ShowOnHome))? "advanceProp" : "")">
    @Html.LabelFor(model => model.ShowOnHome, new { @class = "control-label" })
    <div class="">
        @Html.DropDownListFor(model => model.ShowOnHome, ViewBag.AreaPosition as SelectList, Resource.ChooseAreaDefault,
            new { @class = "form-control ddl_select2" })
        @Html.ValidationMessageFor(m => m.ShowOnHome)
    </div>
</div>*@